---
title: "Data Cleaning"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r load packages and data}
if(!require(readr)){install.packages('readr')}
library(readr)
if(!require(MOTE)){install.packages('MOTE')}
library(MOTE)
if(!require(tidyverse)){install.packages('tidyverse')}
library(tidyverse) 
if(!require(psych)){install.packages('psych')}
library(psych)

knitr::opts_knit$set(root.dir = "/Volumes/fsmresfiles/MSS/Schleider_Lab/jslab/Project Empower-ED")
setwd("/Volumes/fsmresfiles/MSS/Schleider_Lab/jslab/Project Empower-ED")

baseline_english <- read_csv("Data/baseline_english.csv", col_types = cols(.default = "c"))
baseline_spanish <- read_csv("Data/baseline_spanish.csv", col_types = cols(.default = "c"))
baseline_emr_data <- read_csv("Data/emr_data.csv", col_types = cols(.default = "c"))
followup_emr_data <- read_csv("Data/followup_emr_data.csv", col_types = cols(.default = "c"))
participant_database <- read_csv("Data/participant_database.csv", col_types = cols(.default = "c"))
#When combining data, it is easiest to import everything as characters using readr and change to specific variable classes later
```

```{r merge data}
#First, need to make sure we can identify English and Spanish completers 
baseline_english <- baseline_english %>%
  mutate(language = "English")
baseline_spanish <- baseline_spanish %>%
  mutate(language = "Spanish")

#Now merge 
baseline_data <- bind_rows(baseline_english,  baseline_spanish)
baseline_data$Participant_ID <- as.character(baseline_data$Participant_ID)

#The baseline data has some extra rows of participants that consented but then never completed the SSI, so we need to identify the participants that can actually be included in analysis

##Identify included participants based on IDs in tracking document
participant_database <- participant_database %>% 
  mutate(across(
      c(contains("invite_status"),
        contains("baseline_status"),
        contains("oneweek_status"),
        contains("threemonth_status")),
      as.factor))
Participant_ID <- participant_database %>% 
  filter(
    baseline_status == "Complete") %>% 
  pull(Participant_ID)
included_participants <- data.frame(Participant_ID)
included_participants$Participant_ID <- as.character(included_participants$Participant_ID)

##Make a baseline dataframe with just the included participants
filtered_baseline_data <- included_participants %>%
  left_join(baseline_data, by = "Participant_ID", relationship = "one-to-one")

#Attach new dataframe with baseline electronic medical records data
filtered_baseline_data_with_emr <- baseline_emr_data %>%
  left_join(filtered_baseline_data, by = "Participant_ID", relationship = "one-to-one")

#Attach new dataframe with follow-up electronic medical records data
all_data <- followup_emr_data %>%
  left_join(filtered_baseline_data_with_emr, by = "Participant_ID", relationship = "one-to-one")
```

```{r transforming data}
#The child gender, treatment history, and comorbid psych items include all responses from the multiple-select questions in one column. I need to separate them out in order to make them factors. (All other demographics items were made single choice for ease of analysis).

transforming_childgender <- all_data %>% 
  select(dem_childgender, Participant_ID) %>%
  separate_rows(dem_childgender, sep = ",") %>%
  pivot_wider(
    names_from = dem_childgender,
    values_from = dem_childgender,
    values_fill = list(dem_childgender = "0")) %>%
  mutate(across(-Participant_ID, ~ as.factor(as.numeric(. != "0")))) %>% 
  rename_with(~ str_c("dem_childgender_", .), -Participant_ID)

transforming_txtype <- all_data  %>% 
  select(dem_txtype, Participant_ID) %>%
  separate_rows(dem_txtype, sep = ",") %>%
  pivot_wider(
    names_from = dem_txtype,
    values_from = dem_txtype,
    values_fill = list(dem_txtype = "0")) %>%
  mutate(across(-Participant_ID, ~ as.factor(as.numeric(. != "0")))) %>% 
  rename_with(~ str_c("dem_txtype_", .), -Participant_ID)

transforming_psych <- all_data  %>% 
  select(dem_psych, Participant_ID) %>%
  separate_rows(dem_psych, sep = ",") %>%
  pivot_wider(
    names_from = dem_psych,
    values_from = dem_psych,
    values_fill = list(dem_psych = "0")) %>%
  mutate(across(-Participant_ID, ~ as.factor(as.numeric(. != "0")))) %>% 
  rename_with(~ str_c("dem_psych_", .), -Participant_ID)

all_data  <- all_data  %>%
  left_join(transforming_childgender, by = "Participant_ID", relationship = "one-to-one") %>%
  left_join(transforming_txtype, by = "Participant_ID", relationship = "one-to-one") %>%
  left_join(transforming_psych, by = "Participant_ID", relationship = "one-to-one")

all_data  <- all_data  %>% 
  select(-dem_childgender, -dem_txtype, -dem_psych)

#Make all other necessary variables factors
all_data <- all_data %>% 
  select(-contains("TEXT")) %>% 
  mutate(across(
      c(contains("dem_ethnicity"),
        contains("dem_relationship"),
        contains("dem_marital"),
        contains("dem_caretaking"),
        contains("dem_live"),
        contains("dem_income"),
        contains("dem_familyhx"),
        contains("dem_childsex"),
        contains("dem_childethnicity"),
        contains("dem_childinsurance"),
        contains("dem_insurancetype"),
        contains("dem_coverage"),
        contains("dem_outofpocket"),
        contains("dem_childEDtx"),
        contains("dem_medical"),
        contains("twowk_medical_followup"),
        contains("twowk_medical_weight"),
        contains("threemo_medical_followup"),
        contains("threemo_medical_weight"),
        contains("twowk_mentalhealth"),
        contains("threemo_mentalhealth"),
        contains("sixmo_readmit")),
      as.factor))

all_data$dem_insurancetype_emr <- factor(
  all_data$dem_insurancetype_emr,
  levels = c(0, 1),
  labels = c("Private Insurance", "Public Insurance")
)

#And I need to make all necessary variables numeric
all_data <- all_data %>%
  mutate(across(
    c(pi_pfs_1:pi_pfs_7, 
      contains("dem_childage"), 
      contains("dem_childgrade"), 
      contains("dem_admitlength"), 
      contains("dem_admitbmi"), 
      contains("dem_education"),
      contains("admit_days"),
      contains("dischargeweight_lb")), 
    as.numeric))
```

```{r sum scores}
#All relevant items are already reverse-scored in Qualtrics. 
all_data  <- all_data  %>%
  mutate(pi_pfs_sum = pi_pfs_1 + pi_pfs_2 + pi_pfs_3 + pi_pfs_4 + pi_pfs_5 + pi_pfs_6 + pi_pfs_7)
```

```{r create additional stratification variables}
#We decided to stratify education by attended college and below vs graduated college and above, so need to dichotomize
all_data <- all_data %>%
  mutate(
    dem_education_dichotomized = case_when(
      dem_education <= 4 ~ "Less Education",
      dem_education >= 5 ~ "More Education",
      TRUE ~ NA_character_
    ),
    dem_education_dichotomized = factor(dem_education_dichotomized,
                                        levels = c("Less Education", "More Education"))
  )
```

```{r export cleaned data}
write.csv(all_data , "Data/all_data.csv")
```